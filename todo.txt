features:
=========
connections
optional connections (compile code out with flag, and have runtime cfg flag)
optional checksums
metrics on crc failures, bad frames (too long before cobs 0)
optional COBS encoding (might have native natural unambiguous framing like usb hid)

correctness?
============
unit tests for ARQ__ALIGNOF
unit tests for arq__alloc
unit test for recv wnd ptr valid => 1
who initializes the recv wnd ptr?
need an ACK bit? initial syn doesn't come with payload, can we fully NAK 0? ACK bit sounds easier.
do we NAK sequence numbers off the top end of the recv window? or just ignore?
if send window receives a NAK, should reset send window pointer if NAK is < current pointer seq/seg
where / when do send + recv wnd ptrs get reset?

optimizations:
==============
big bit vector to hold 'ready' message state of entire send window? rtx == 0 => msg bit set?
instead of % and / all over the place for indexing + iterating, use 2 loops: pre-wrap, post-wrap
maybe a builtin_expect in recv_frame_fill, 1/16 chance of terminator byte for empty frame
multiple frames can fit in the ingoing / outgoing frame buffers, exploit that (or round-robin frame bufs)
recv window ack flag array => bitfield? might not be much smaller / faster

build / infra:
==============
pull out mock functions into common header
(compile-time selection?) only allow power-of-two-sized windows, replace div/mod
ninja builds should emit timing json into CMAKE_BINARY_DIR
compilation tests don't run by default?

hygiene:
========
normalize naming: size is the size of a struct / header / whatever. len is the length of a buffer.
send_ptr_release() errors if the send pointer isn't owned by the user? new error enum?
better return values for send_ptr_get and send_ptr_release (you already have ptr, there's nothing to send, etc)
pull out buf/cap/len into arq__buf_t, reuse for send/recv frame_t's

